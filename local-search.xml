<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>34. 在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2023/11/23/leetcode34/"/>
    <url>/2023/11/23/leetcode34/</url>
    
    <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个按升序排序的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的起始位置和结束位置。如果目标值不在数组中，则返回 [-1, -1]。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>该问题可以通过两次二分查找来解决。第一次二分查找用于找到目标值的起始位置，第二次二分查找用于找到目标值的结束位置。</p></li><li><p>定义两个变量 left 和 right，初始值分别为 0 和 nums 数组的长度减一。</p></li><li><p>第一次二分查找，找到目标值的起始位置。循环条件为 left &lt;&#x3D; right ：</p><ul><li>计算中间位置 mid，通过left + (right - left) &#x2F; 2 求得。</li><li>如果 nums[mid] 大于目标值 target，则更新 right  为 mid - 1，继续向左查找。</li><li>如果 nums[mid] 小于目标值 target，则更新 left 为 mid + 1，继续向右查找。</li><li>如果 nums[mid] 等于目标值 target，则更新 right 为 mid - 1，继续向左查找。</li></ul></li><li><p>进行第二次二分查找，找到目标值的结束位置。重置变量 left 为 0，right 为 nums 数组的长度减一。<br>循环条件为 left &lt;&#x3D; right 。</p><ul><li>计算中间位置 mid，通过left + (right - left) &#x2F; 2 求得。</li><li>如果 nums[mid] 大于目标值 target，则更新 right  为 mid - 1，继续向左查找。</li><li>如果 nums[mid] 小于目标值 target，则更新 left为 mid + 1，继续向右查找。</li><li>如果 nums[mid] 等于目标值 target，则更新 left为 mid + 1，继续向右查找。<br>返回结果 [left, right ]，即为目标值在数组中的起始位置和结束位置。</li></ul></li></ol><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>C#</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int[] <span class="hljs-title class_">SearchRange</span>(int[] nums, int target)<br>&#123;<br>    int[] result = &#123; -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>    int left = <span class="hljs-number">0</span>;<br>    int right = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 寻找起始位置</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        int mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">0</span>] = mid;<br>            right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向左查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找结束位置</span><br>    left = <span class="hljs-number">0</span>;<br>    end = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        int mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">1</span>] = mid;<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向右查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">searchRange</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    result[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    result[<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 寻找起始位置</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">0</span>] = mid;<br>            right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向左查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找结束位置</span><br>    left = <span class="hljs-number">0</span>;<br>    end = numsSize - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= end)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">1</span>] = mid;<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向右查找</span><br>        &#125;<br>    &#125;<br><br>    *returnSize = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(log n)，其中 n 是数组的长度。每次二分查找可以将查找范围缩小一半，因此时间复杂度为对数级别。</li><li>空间复杂度：O(1)。除了返回的结果数组外，算法的额外空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2023/11/21/leetcode35/"/>
    <url>/2023/11/21/leetcode35/</url>
    
    <content type="html"><![CDATA[<h2 id="标题：35-搜索插入位置"><a href="#标题：35-搜索插入位置" class="headerlink" title="标题：35. 搜索插入位置"></a>标题：35. 搜索插入位置</h2><blockquote><p>我最近在研究二分算法，并进行了相关实现。</p></blockquote><p><strong>搜索插入位置算法解析及实现步骤</strong></p><p>搜索插入位置算法用于在已排序的数组中查找目标值，并返回其插入的位置。</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个 n 个元素有序（升序）的整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，并返回其插入的位置。如果目标值存在，则返回目标值的索引；如果目标值不存在，则返回它将会被插入的位置索引。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><ol><li>初始化左指针 left 为数组起始位置，右指针 right 为数组末尾位置。</li><li>循环执行以下步骤，直到左指针不再小于等于右指针：<ul><li>计算中间指针 mid，通过 left + (right - left) &#x2F; 2 求得。</li><li>如果中间元素大于目标值，将右指针 right 更新为 mid - 1。</li><li>如果中间元素小于目标值，将左指针 left 更新为 mid + 1。</li><li>如果中间元素等于目标值，返回 mid 作为目标值的插入位置。</li></ul></li><li>若循环结束仍未找到目标值，返回左指针 left 作为目标值的插入位置。</li></ol><h3 id="解题实现："><a href="#解题实现：" class="headerlink" title="解题实现："></a>解题实现：</h3><p>C#</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">searchInsert</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> right = nums.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-built_in">int</span> mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(log n)，其中 n 是数组的长度。</li><li>空间复杂度：O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章</title>
    <link href="/2023/11/11/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2023/11/11/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>线代</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 求导数</title>
    <link href="/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>高数二</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul注册发现</title>
    <link href="/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/"/>
    <url>/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>注册发现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023个人年度计划</title>
    <link href="/2023/11/11/2023%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    <url>/2023/11/11/2023%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ocelot网关</title>
    <link href="/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <url>/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>网关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>影响力</title>
    <link href="/2023/11/11/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/11/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>心理学</category>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后端面试</title>
    <link href="/2023/11/11/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    <url>/2023/11/11/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行为型设计模式</title>
    <link href="/2023/11/11/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Behavioral</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构型设计模式</title>
    <link href="/2023/11/11/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Structural</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建型设计模式</title>
    <link href="/2023/11/11/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Creative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具</title>
    <link href="/2023/11/11/%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/11/11/%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2023/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>口语第一天</title>
    <link href="/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/"/>
    <url>/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>口语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>704. 二分查找</title>
    <link href="/2023/11/11/%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/11/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题：704-二分查找"><a href="#标题：704-二分查找" class="headerlink" title="标题：704. 二分查找"></a>标题：704. 二分查找</h2><blockquote><p>我最近在研究二分查找算法，并进行了相关实现。通过本文，我将详细介绍二分查找算法的原理和步骤，以及如何在编程中实现该算法。这篇文章适合那些对算法和查找技术感兴趣的读者。</p></blockquote><p><strong>二分查找算法解析及实现步骤</strong><br>二分查找算法是一种高效的查找方法，大部分适用于已排序的数组（少部分可以求极值）。</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><ol><li>初始化左指针 left 为数组起始位置，右指针 right 为数组末尾位置。</li><li>循环执行以下步骤，直到左指针不再小于等于右指针：</li><li>计算中间指针 mid，通过 left + (right - left) &#x2F; 2 求得。<ul><li>如果中间元素大于目标值，将右指针 right 更新为 mid - 1。</li><li>如果中间元素小于目标值，将左指针 left 更新为 mid + 1。</li><li>如果中间元素等于目标值，返回 mid 作为目标值的索引。</li><li>若循环结束仍未找到目标值，返回 -1 表示未找到。</li></ul></li></ol><h3 id="解题实现："><a href="#解题实现：" class="headerlink" title="解题实现："></a>解题实现：</h3><p>C#</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Search</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> right = nums.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-built_in">int</span> mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ol><li><p>时间复杂度：O(log n)，其中 n 是数组的长度。</p></li><li><p>空间复杂度：O(1)。</p></li></ol><p><strong>通过本文，你将清楚地了解二分查找算法的原理和实现步骤。希望对那些对算法和查找感兴趣的读者有所帮助。如果你想了解更多相关内容，可以查看我的其他文章</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2023/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 求极限</title>
    <link href="/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>高数二</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dur词根 - 持久、坚固</title>
    <link href="/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Dur词根-持久、坚固"><a href="#Dur词根-持久、坚固" class="headerlink" title="Dur词根 - 持久、坚固"></a>Dur词根 - 持久、坚固</h2><p><strong>词根口语： “我最近背单词太辛苦了，每天就像一场’Dur’al marathon！💪”</strong></p><blockquote><p>在我们的生活中，持续性和忍耐力是非常重要的品质。无论是面对困难的时候还是追求目标的过程中，”Dur”词根下的词汇可以成为我们的助力</p></blockquote><ol><li><font color=Crimson>Dur</font>ation（n.）- 持续时间</li><li>En<font color=Crimson>dur</font>e（v.）- 忍耐</li><li><font color=Crimson>Dur</font>able（adj.）- 耐久的</li><li>In<font color=Crimson>dur</font>ation（n.）- 硬化</li><li><font color=Crimson>Dur</font>ess（n.）- 强迫</li><li><font color=Crimson>Dur</font>ing（prep.）- 在…期间</li><li>En<font color=Crimson>dur</font>ance（n.）- 忍耐力</li><li>In<font color=Crimson>dur</font>ative（adj.）- 强化的</li><li>En<font color=Crimson>dur</font>ing（adj.）- 持久的</li><li>Ob<font color=Crimson>dur</font>ate（adj.）- 顽固的</li><li>En<font color=Crimson>dur</font>ant（adj.）- 耐心的</li><li>In<font color=Crimson>dur</font>ated（adj.）- 坚硬的</li><li><font color=Crimson>Dur</font>ance（n.）- 拘留</li><li>In<font color=Crimson>dur</font>ing（adj.）- 忍耐的</li><li><font color=Crimson>Dur</font>ability（n.）- 耐久性</li><li>Ob<font color=Crimson>dur</font>ation（n.）- 顽固</li><li>En<font color=Crimson>dur</font>ability（n.）- 持久性</li><li><font color=Crimson>Dur</font>ometer（n.）- 量硬度的仪器</li><li>In<font color=Crimson>dur</font>ating（adj.）- 使硬化的</li></ol><p><strong>英语谚语： “Durability is not the absence of vulnerability, but the ability to endure and bounce back. Keep going!🌟”</strong></p><p><strong>翻译：持久性不是没有脆弱性，而是有承受和反弹的能力。继续前进</strong></p>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>单词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/09/hello-world/"/>
    <url>/2023/11/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
