<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>344.反转字符串</title>
    <link href="/2023/12/14/leetcode344/"/>
    <url>/2023/12/14/leetcode344/</url>
    
    <content type="html"><![CDATA[<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p><p>不要使用额外的数组空间，必须在原地修改输入数组、使用 O(1) 额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p><strong>示例 1:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：[<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>]<br>输出：[<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：[<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>]<br>输出：[<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="类比和解题步骤"><a href="#类比和解题步骤" class="headerlink" title="类比和解题步骤"></a>类比和解题步骤</h4><p>考虑类比：假设你有一串珠子，你希望将其颠倒过来。你可以使用两个指针，一个指向字符串的开头，另一个指向字符串的末尾，然后交换它们指向的字符。</p><ol><li><strong>初始化两个指针：</strong> 分别指向字符串的开头和末尾。</li><li><strong>交换字符：</strong> 使用一个循环，不断交换两个指针所指向的字符，然后将指针向中间移动，直到它们相遇。</li></ol><h4 id="特殊案例"><a href="#特殊案例" class="headerlink" title="特殊案例"></a>特殊案例</h4><ul><li>如果输入数组为空，则直接返回空数组。</li></ul><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ReverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>    <span class="hljs-comment">// 如果传入的字符数组为空或者长度小于2，则直接返回</span><br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.Length &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义左右指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> s.Length - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 左指针小于右指针时，交换左右指针指向的字符，并移动指针</span><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 交换左右指针指向的字符</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> s[left];<br>        s[left] = s[right];<br>        s[right] = temp;<br><br>        <span class="hljs-comment">// 移动指针</span><br>        left++;<br>        right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> sSize)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span> || sSize &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = sSize - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-comment">// 交换左右指针指向的字符</span><br>        <span class="hljs-type">char</span> temp = s[left];<br>        s[left] = s[right];<br>        s[right] = temp;<br><br>        <span class="hljs-comment">// 移动指针</span><br>        left++;<br>        right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是数组 <code>s</code> 的长度。因为我们只遍历了一半的数组。</li><li>空间复杂度：O(1)。只使用了常数级别的额外空间。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.两数之和</title>
    <link href="/2023/12/14/leetcode1/"/>
    <url>/2023/12/14/leetcode1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例 1:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br>输出：[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>解释：nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>，返回 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], target = <span class="hljs-number">6</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], target = <span class="hljs-number">6</span><br>输出：[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="类比和解题步骤"><a href="#类比和解题步骤" class="headerlink" title="类比和解题步骤"></a>类比和解题步骤</h4><p>考虑类比：假设你在一家商店，每件商品都有一个价格，现在你有一个目标金额，需要找到两件商品的价格之和等于目标金额。你可以通过记录每件商品的价格和对应的索引，然后查找是否存在另一件商品的价格与目标金额减去当前商品的价格相等。</p><ol><li><strong>初始化哈希表：</strong> 创建一个哈希表，用于存储每个数字及其索引的映射关系。</li><li><strong>遍历数组：</strong> 遍历数组元素，对于每个元素，计算目标值与当前元素的差值。</li><li><strong>查找差值：</strong> 在哈希表中查找差值，如果存在，则返回当前元素的索引和差值对应的索引。</li></ol><h4 id="特殊案例"><a href="#特殊案例" class="headerlink" title="特殊案例"></a>特殊案例</h4><ul><li>如果输入数组为空，则直接返回空数组或标识没有答案的结果。</li></ul><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] TwoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-comment">// 创建一个字典，用来存储数组中的元素和下标</span><br>    Dictionary&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; numIndexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dictionary</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;();<br><br>    <span class="hljs-comment">// 遍历数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.Length; i++) &#123;<br>        <span class="hljs-comment">// 计算当前元素和目标值的差值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">complement</span> <span class="hljs-operator">=</span> target - nums[i];<br><br>        <span class="hljs-comment">// 如果字典中包含差值，则返回下标</span><br>        <span class="hljs-keyword">if</span> (numIndexMap.ContainsKey(complement)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; numIndexMap[complement], i &#125;;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果字典中不包含当前元素，则添加到字典中</span><br>        <span class="hljs-keyword">if</span> (!numIndexMap.ContainsKey(nums[i])) &#123;<br>            numIndexMap.Add(nums[i], i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 没有找到答案</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">TwoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-comment">// 哈希表，用于存储数字及其索引的映射关系</span><br>    <span class="hljs-type">int</span>* numIndexMap = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * numsSize * <span class="hljs-number">2</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; i++) &#123;<br>        <span class="hljs-type">int</span> complement = target - nums[i];<br><br>        <span class="hljs-comment">// 在哈希表中查找差值</span><br>        <span class="hljs-keyword">if</span> (numIndexMap[complement * <span class="hljs-number">2</span>] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">2</span>);<br>            result[<span class="hljs-number">0</span>] = numIndexMap[complement * <span class="hljs-number">2</span>] - <span class="hljs-number">1</span>;<br>            result[<span class="hljs-number">1</span>] = i;<br>            *returnSize = <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果差值不存在，将当前数字及其索引存入哈希表</span><br>        numIndexMap[nums[i] * <span class="hljs-number">2</span>] = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 没有找到答案</span><br>    *returnSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是数组 nums 的长度。遍历数组一次，每次查找哈希表的操作都是 O(1)。</li><li>空间复杂度：O(n)，其中 n 是数组 nums 的长度。哈希表的空间复杂度取决于数组中不同元素的个数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>350. 两个数组的交集 II</title>
    <link href="/2023/12/13/leetcode350/"/>
    <url>/2023/12/13/leetcode350/</url>
    
    <content type="html"><![CDATA[<h2 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a>350. 两个数组的交集 II</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出: <span class="hljs-comment">[2,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[4,9,5]</span>, nums2 = <span class="hljs-comment">[9,4,9,8,4]</span><br>输出: <span class="hljs-comment">[4,9]</span><br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>输出结果中每个元素出现的次数应与元素在两个数组中出现的次数一致。</li><li>我们可以不考虑输出结果的顺序。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用哈希表统计一个数组中每个元素的出现次数，然后遍历另一个数组，找到与哈希表中相同元素，将其添加到结果集中。</p><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] Intersect(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    <span class="hljs-comment">// 创建一个字典，用于统计 nums1 中每个元素出现的次数</span><br>    Dictionary&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; dict1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dictionary</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;();<br>    <span class="hljs-comment">// 创建一个列表，用于存储结果</span><br>    List&lt;<span class="hljs-type">int</span>&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-type">int</span>&gt;();<br><br>    <span class="hljs-comment">// 统计 nums1 中每个元素的出现次数</span><br>    foreach (<span class="hljs-type">int</span> num in nums1) &#123;<br>        <span class="hljs-comment">// 如果字典中已经存在该元素，则将该元素的计数加 1</span><br>        <span class="hljs-keyword">if</span> (dict1.ContainsKey(num)) &#123;<br>            dict1[num]++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果字典中不存在该元素，则将该元素添加到字典中，并将其计数设置为 1</span><br>            dict1[num] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历 nums2，找到与 dict1 中相同的元素，将其添加到结果集中</span><br>    foreach (<span class="hljs-type">int</span> num in nums2) &#123;<br>        <span class="hljs-comment">// 如果字典中存在该元素，且该元素的计数大于 0，则将该元素添加到结果集中</span><br>        <span class="hljs-keyword">if</span> (dict1.ContainsKey(num) &amp;&amp; dict1[num] &gt; <span class="hljs-number">0</span>) &#123;<br>            result.Add(num);<br>            <span class="hljs-comment">// 将该元素的计数减 1</span><br>            dict1[num]--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回结果集</span><br>    <span class="hljs-keyword">return</span> result.ToArray();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">intersect</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (nums1Size &gt; nums2Size ? nums2Size : nums1Size));<br>    <span class="hljs-type">int</span> resultSize = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span>* dict1 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * nums1Size);<br>    <span class="hljs-built_in">memset</span>(dict1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * nums1Size);<br><br>    <span class="hljs-comment">// 构建哈希表 dict1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1Size; i++) &#123;<br>        dict1[nums1[i]]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历数组 nums2，找到与 dict1 中相同的元素，将其添加到结果集中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2Size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (dict1[nums2[i]] &gt; <span class="hljs-number">0</span>) &#123;<br>            result[resultSize++] = nums2[i];<br>            dict1[nums2[i]]--;<br>        &#125;<br>    &#125;<br><br>    *returnSize = resultSize;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(m + n)，其中 m 和 n 分别是数组 nums1 和 nums2 的长度。分别遍历两个数组一次。</li><li>空间复杂度：O(m)，其中 m 是数组 nums1 的长度。使用了一个哈希表。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>349. 两个数组的交集</title>
    <link href="/2023/12/13/leetcode349/"/>
    <url>/2023/12/13/leetcode349/</url>
    
    <content type="html"><![CDATA[<h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[1,2,2,1]</span>, nums2 = <span class="hljs-comment">[2,2]</span><br>输出: <span class="hljs-comment">[2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">输入: nums1 = [<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>], nums2 = [<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>]<br>输出: [<span class="hljs-number">9</span>,<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>输出结果中的每个元素一定是唯一的。</li><li>我们可以不考虑输出结果的顺序。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用哈希表统计一个数组中每个元素的出现次数，然后遍历另一个数组，找到与哈希表中相同元素，将其添加到结果集中。</p><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] Intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>    <span class="hljs-comment">// 创建一个HashSet，用于存储nums1中的元素</span><br>    HashSet&lt;<span class="hljs-type">int</span>&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;<span class="hljs-type">int</span>&gt;(nums1);<br>    <span class="hljs-comment">// 创建一个HashSet，用于存储nums2中的元素</span><br>    HashSet&lt;<span class="hljs-type">int</span>&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;<span class="hljs-type">int</span>&gt;();<br><br>    <span class="hljs-comment">// 遍历nums2，如果nums1中包含nums2中的元素，则将其添加到set2中</span><br>    foreach (<span class="hljs-type">int</span> num in nums2) &#123;<br>        <span class="hljs-keyword">if</span> (set1.Contains(num)) &#123;<br>            set2.Add(num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回set2中的元素</span><br>    <span class="hljs-keyword">return</span> set2.ToArray();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">intersection</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (nums1Size &gt; nums2Size ? nums2Size : nums1Size));<br>    <span class="hljs-type">int</span> resultSize = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span>* set1 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * nums1Size);<br>    <span class="hljs-type">int</span>* set2 = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * nums2Size);<br>    <span class="hljs-type">int</span> set1Size = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> set2Size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 构建哈希表 set1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1Size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!contains(set1, set1Size, nums1[i])) &#123;<br>            set1[set1Size++] = nums1[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历数组 nums2，找到与 set1 中相同的元素，将其添加到 set2</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2Size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (contains(set1, set1Size, nums2[i]) &amp;&amp; !contains(set2, set2Size, nums2[i])) &#123;<br>            set2[set2Size++] = nums2[i];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将 set2 转为数组 result</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; set2Size; i++) &#123;<br>        result[resultSize++] = set2[i];<br>    &#125;<br><br>    *returnSize = resultSize;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 判断数组中是否包含某个元素</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span>* arr, <span class="hljs-type">int</span> size, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == target) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(m + n)，其中 m 和 n 分别是数组 nums1 和 nums2 的长度。分别遍历两个数组一次。</li><li>空间复杂度：O(m + n)，其中 m 和 n 分别是数组 nums1 和 nums2 的长度。使用了两个哈希表。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>383. 赎金信</title>
    <link href="/2023/12/13/leetcode383/"/>
    <url>/2023/12/13/leetcode383/</url>
    
    <content type="html"><![CDATA[<h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。</p><p>赎金信字符串中的字符只包含小写字母。杂志字符串中的字符只包含小写字母。</p><p><strong>示例 1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">ransomNote</span> = <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-attr">magazine</span> = <span class="hljs-string">&quot;b&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">ransomNote</span> = <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-attr">magazine</span> = <span class="hljs-string">&quot;ab&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">ransomNote</span> = <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-attr">magazine</span> = <span class="hljs-string">&quot;aab&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用数组or哈希表统计每个字符的出现次数。</p><ol><li>遍历 magazine，对于每个字符，将对应的哈希表的值加一。</li><li>遍历 ransomNote，对于每个字符，将对应的哈希表的值减一。</li><li>如果哈希表的值都大于等于零，则返回 true；否则返回 false。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> bool <span class="hljs-title function_">CanConstruct</span><span class="hljs-params">(string ransomNote, string magazine)</span> &#123;<br>    <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br><br>    <span class="hljs-comment">// 统计 magazine 中每个字符的出现次数</span><br>    foreach (<span class="hljs-type">char</span> ch in magazine) &#123;<br>        count[ch - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计 ransomNote 中每个字符的出现次数</span><br>    foreach (<span class="hljs-type">char</span> ch in ransomNote) &#123;<br>        count[ch - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断数组中所有元素是否大于等于零</span><br>    foreach (<span class="hljs-type">int</span> c in count) &#123;<br>        <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">canConstruct</span><span class="hljs-params">(<span class="hljs-type">char</span> * ransomNote, <span class="hljs-type">char</span> * magazine)</span>&#123;<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 统计 magazine 中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; magazine[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        count[magazine[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计 ransomNote 中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; ransomNote[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        count[ransomNote[i] - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断数组中所有元素是否大于等于零</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (count[i] &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n + m)，其中 n 和 m 分别是 ransomNote 和 magazine 的长度。需要遍历字符串两次。</li><li>空间复杂度：O(1)。因为只使用了大小为 26 的数组。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>242. 有效的字母异位词</title>
    <link href="/2023/12/13/leetcode242/"/>
    <url>/2023/12/13/leetcode242/</url>
    
    <content type="html"><![CDATA[<h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">s</span> = <span class="hljs-string">&quot;anagram&quot;</span>, <span class="hljs-attr">t</span> = <span class="hljs-string">&quot;nagaram&quot;</span><br>输出: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入: <span class="hljs-attr">s</span> = <span class="hljs-string">&quot;rat&quot;</span>, <span class="hljs-attr">t</span> = <span class="hljs-string">&quot;car&quot;</span><br>输出: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>说明:</strong> 你可以假设字符串只包含小写字母。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用数组or哈希表来统计每个字符的出现次数。</p><ol><li>创建一个大小为 26 的数组，用于统计每个字母的出现次数。</li><li>遍历字符串 s，对于每个字符，将对应的数组元素加一。</li><li>遍历字符串 t，对于每个字符，将对应的数组元素减一。</li><li>如果两个字符串是字母异位词，则最终数组中所有元素的值都应为 0。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> bool <span class="hljs-title function_">IsAnagram</span><span class="hljs-params">(string s, string t)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.Length != t.Length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br><br>    <span class="hljs-comment">// 统计字符串 s 中每个字符的出现次数</span><br>    foreach (<span class="hljs-type">char</span> ch in s) &#123;<br>        count[ch - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计字符串 t 中每个字符的出现次数</span><br>    foreach (<span class="hljs-type">char</span> ch in t) &#123;<br>        count[ch - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断数组中所有元素是否为 0</span><br>    foreach (<span class="hljs-type">int</span> c in count) &#123;<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(<span class="hljs-type">char</span> * s, <span class="hljs-type">char</span> * t)</span>&#123;<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// 统计字符串 s 中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        count[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计字符串 t 中每个字符的出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; t[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        count[t[i] - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断数组中所有元素是否为 0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (count[i] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是字符串的长度。需要遍历字符串两次。</li><li>空间复杂度：O(1)。因为只使用了大小为 26 的数组。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>141. 环形链表 I</title>
    <link href="/2023/12/11/leetcode141/"/>
    <url>/2023/12/11/leetcode141/</url>
    
    <content type="html"><![CDATA[<h2 id="141-环形链表-I"><a href="#141-环形链表-I" class="headerlink" title="141. 环形链表 I"></a>141. 环形链表 I</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个链表，判断链表中是否有环。</p><p><strong>进阶：</strong> 你能否不使用额外空间解决此题？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用快慢指针，判断链表是否有环。</p><ol><li>使用两个指针 <code>slow</code> 和 <code>fast</code>，<code>slow</code> 每次走一步，<code>fast</code> 每次走两步。</li><li>如果链表有环，<code>fast</code> 最终会追上 <code>slow</code>，如果链表无环，<code>fast</code> 会先到达链表末尾。</li><li>如果存在环，两个指针最终会相遇；如果不存在环，快指针会先到达链表末尾。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> bool <span class="hljs-title function_">HasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br><br>        <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 链表有环</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 链表无环</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode *head)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">slow</span> =</span> head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">fast</span> =</span> head;<br><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        slow = slow-&gt;next;<br>        fast = fast-&gt;next-&gt;next;<br><br>        <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 链表有环</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 链表无环</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。第一次遍历检测是否有环。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>142. 环形链表 II</title>
    <link href="/2023/12/11/leetcode142/"/>
    <url>/2023/12/11/leetcode142/</url>
    
    <content type="html"><![CDATA[<h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个链表，返回链表开始入环的第一个节点。如果链表无环，则返回 <code>null</code>。</p><p><strong>进阶：</strong> 你是否可以不用额外空间解决此题？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用快慢指针，先判断链表是否有环，然后找到环的入口。</p><ol><li>使用快慢指针，判断链表是否有环。快指针每次走两步，慢指针每次走一步，如果两者相遇，则链表有环。</li><li>如果链表有环，将其中一个指针移到链表头，然后两个指针每次都走一步，当它们再次相遇时，相遇的节点即为环的入口。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">DetectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br><br>    <span class="hljs-comment">// 判断链表是否有环</span><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>        slow = slow.next;<br>        fast = fast.next.next;<br>        <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>            <span class="hljs-comment">// 链表有环</span><br>            <span class="hljs-comment">// 将其中一个指针移到链表头</span><br>            slow = head;<br>            <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>                slow = slow.next;<br>                fast = fast.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> slow; <span class="hljs-comment">// 返回环的入口</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 链表无环</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode *<span class="hljs-title function_">detectCycle</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode *head)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">slow</span> =</span> head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">fast</span> =</span> head;<br><br>    <span class="hljs-comment">// 判断链表是否有环</span><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        slow = slow-&gt;next;<br>        fast = fast-&gt;next-&gt;next;<br>        <span class="hljs-keyword">if</span> (slow == fast) &#123;<br>            <span class="hljs-comment">// 链表有环</span><br>            <span class="hljs-comment">// 将其中一个指针移到链表头</span><br>            slow = head;<br>            <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>                slow = slow-&gt;next;<br>                fast = fast-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> slow; <span class="hljs-comment">// 返回环的入口</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 链表无环</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。第一次遍历检测是否有环，第二次遍历找到环的入口。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160. 相交链表</title>
    <link href="/2023/12/10/leetcode160/"/>
    <url>/2023/12/10/leetcode160/</url>
    
    <content type="html"><![CDATA[<h2 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个程序，找到两个单链表相交的起始节点。</p><p><strong>示例:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">A:          a1 → a2</span><br>                    ↘<br>                      c1 → c2 → c3<br>                    ↗            <br><span class="hljs-section">B:     b1 → b2 → b3</span><br></code></pre></td></tr></table></figure><p>在节点 <code>c1</code> 开始相交。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>遍历两个链表，得到它们的长度分别为 <code>lenA</code> 和 <code>lenB</code>。</li><li>如果链表 A 的长度大于链表 B 的长度，将链表 A 的指针向前移动 <code>lenA - lenB</code> 步。</li><li>如果链表 B 的长度大于链表 A 的长度，将链表 B 的指针向前移动 <code>lenB - lenA</code> 步。</li><li>同时遍历两个链表，找到相交的节点，返回该节点。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">GetIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>    <span class="hljs-comment">// 获取链表A的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lenA</span> <span class="hljs-operator">=</span> GetListLength(headA);<br>    <span class="hljs-comment">// 获取链表B的长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lenB</span> <span class="hljs-operator">=</span> GetListLength(headB);<br><br>    <span class="hljs-comment">// 将链表A和链表B的长度相等</span><br>    <span class="hljs-keyword">while</span> (lenA &gt; lenB) &#123;<br>        <span class="hljs-comment">// 将链表A的指针指向下一个节点</span><br>        headA = headA.next;<br>        <span class="hljs-comment">// 将链表A的长度减1</span><br>        lenA--;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (lenB &gt; lenA) &#123;<br>        <span class="hljs-comment">// 将链表B的指针指向下一个节点</span><br>        headB = headB.next;<br>        <span class="hljs-comment">// 将链表B的长度减1</span><br>        lenB--;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历链表A和链表B，当指针指向同一个节点时，返回该节点</span><br>    <span class="hljs-keyword">while</span> (headA != headB) &#123;<br>        <span class="hljs-comment">// 将链表A的指针指向下一个节点</span><br>        headA = headA.next;<br>        <span class="hljs-comment">// 将链表B的指针指向下一个节点</span><br>        headB = headB.next;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回链表A的指针</span><br>    <span class="hljs-keyword">return</span> headA;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">GetListLength</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">// 初始化链表长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历链表，将链表长度加1</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">null</span>) &#123;<br>        length++;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-comment">// 返回链表长度</span><br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode *headA, <span class="hljs-keyword">struct</span> ListNode *headB)</span> &#123;<br>    <span class="hljs-comment">// 获取链表A的长度</span><br>    <span class="hljs-type">int</span> lenA = getListLength(headA);<br>    <span class="hljs-comment">// 获取链表B的长度</span><br>    <span class="hljs-type">int</span> lenB = getListLength(headB);<br><br>    <span class="hljs-comment">// 将链表A的指针移动到与链表B等长</span><br>    <span class="hljs-keyword">while</span> (lenA &gt; lenB) &#123;<br>        headA = headA-&gt;next;<br>        lenA--;<br>    &#125;<br><br>    <span class="hljs-comment">// 将链表B的指针移动到与链表A等长</span><br>    <span class="hljs-keyword">while</span> (lenB &gt; lenA) &#123;<br>        headB = headB-&gt;next;<br>        lenB--;<br>    &#125;<br><br>    <span class="hljs-comment">// 同时移动指针，直到相遇</span><br>    <span class="hljs-keyword">while</span> (headA != headB) &#123;<br>        headA = headA-&gt;next;<br>        headB = headB-&gt;next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> headA;<br>&#125;<br><br><span class="hljs-comment">// 获取链表长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getListLength</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-comment">// 初始化长度</span><br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历链表</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 长度加1</span><br>        length++;<br>        <span class="hljs-comment">// 指针指向下一个节点</span><br>        head = head-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">// 返回链表长度</span><br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(m + n)，其中 m 和 n 分别是两个链表的长度。遍历两个链表一次，然后遍历相交的节点一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.删除链表的倒数第N个节点</title>
    <link href="/2023/12/10/leetcode19/"/>
    <url>/2023/12/10/leetcode19/</url>
    
    <content type="html"><![CDATA[<h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19. 删除链表的倒数第N个节点"></a>19. 删除链表的倒数第N个节点</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个链表，删除链表的倒数第 <code>n</code> 个节点，并且返回链表的头结点。</p><p><strong>示例:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>, n = <span class="hljs-number">2</span><br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用双指针的方法来找到倒数第 <code>n</code> 个节点，然后删除该节点。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>使用两个指针 <code>fast</code> 和 <code>slow</code>，初始时都指向链表的头节点。</li><li>先将 <code>fast</code> 指针向前移动 <code>n+1</code> 步。</li><li>然后，同时移动 <code>fast</code> 和 <code>slow</code> 指针，直到 <code>fast</code> 指针到达链表末尾。</li><li>此时，<code>slow</code> 指针指向倒数第 <code>n+1</code> 个节点。</li><li>将 <code>slow</code> 指针的下一个节点删除，即将 <code>slow.next</code> 指向 <code>slow.next.next</code>。</li><li>返回头节点。</li></ol><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">ListNode</span> <span class="hljs-title class_">RemoveNthFromEnd</span>(<span class="hljs-title class_">ListNode</span> head, int n) &#123;<br>    <span class="hljs-title class_">ListNode</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummy.<span class="hljs-property">next</span> = head;<br>    <span class="hljs-title class_">ListNode</span> fast = dummy;<br>    <span class="hljs-title class_">ListNode</span> slow = dummy;<br><br>    <span class="hljs-comment">// 先将 fast 指针向前移动 n+1 步</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        fast = fast.<span class="hljs-property">next</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 同时移动 fast 和 slow 指针，直到 fast 到达链表末尾</span><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span>) &#123;<br>        fast = fast.<span class="hljs-property">next</span>;<br>        slow = slow.<span class="hljs-property">next</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除倒数第 n 个节点</span><br>    slow.<span class="hljs-property">next</span> = slow.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br><br>    <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummy</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummy-&gt;next = head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">fast</span> =</span> dummy;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">slow</span> =</span> dummy;<br><br>    <span class="hljs-comment">// 先将 fast 指针向前移动 n+1 步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        fast = fast-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// 同时移动 fast 和 slow 指针，直到 fast 到达链表末尾</span><br>    <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">NULL</span>) &#123;<br>        fast = fast-&gt;next;<br>        slow = slow-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除倒数第 n 个节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">temp</span> =</span> slow-&gt;next;<br>    slow-&gt;next = slow-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br><br>    <span class="hljs-keyword">return</span> dummy-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。两个指针分别遍历链表一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24. 两两交换链表中的节点</title>
    <link href="/2023/12/10/leetcode24/"/>
    <url>/2023/12/10/leetcode24/</url>
    
    <content type="html"><![CDATA[<h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>示例:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span><br>输出：<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用迭代或递归的方式来实现两两交换链表中的节点。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p><strong>迭代方法：</strong></p><ol><li>初始化一个虚拟头节点 <code>dummy</code>，使其 <code>next</code> 指向链表的头节点。</li><li>初始化指针 <code>prev</code>，初始指向虚拟头节点。</li><li>使用循环遍历链表，每次交换两个节点，更新 <code>prev</code> 的 <code>next</code> 指针，直到遍历完整个链表。</li></ol><p><strong>递归方法：</strong></p><ol><li>使用递归实现两两交换链表中的节点，递归的终止条件是当前节点为 <code>null</code> 或者 <code>next</code> 节点为 <code>null</code>。</li><li>在递归过程中，交换当前节点和下一个节点，并递归调用下下个节点。</li><li>返回新的头节点。</li></ol><h3 id="C-代码实现（迭代方法）"><a href="#C-代码实现（迭代方法）" class="headerlink" title="C#代码实现（迭代方法）"></a>C#代码实现（迭代方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">ListNode</span> <span class="hljs-title class_">SwapPairs</span>(<span class="hljs-title class_">ListNode</span> head) &#123;<br>    <span class="hljs-comment">// 创建一个虚拟节点，指向head</span><br>    <span class="hljs-title class_">ListNode</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummy.<span class="hljs-property">next</span> = head;<br>    <span class="hljs-comment">// 创建一个前一个节点，指向虚拟节点</span><br>    <span class="hljs-title class_">ListNode</span> prev = dummy;<br><br>    <span class="hljs-comment">// 当前一个节点和它的下一个节点都不为空时，进行交换</span><br>    <span class="hljs-keyword">while</span> (prev.<span class="hljs-property">next</span> != <span class="hljs-literal">null</span> &amp;&amp; prev.<span class="hljs-property">next</span>.<span class="hljs-property">next</span> != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 创建两个节点，分别指向前一个节点和它的下一个节点</span><br>        <span class="hljs-title class_">ListNode</span> first = prev.<span class="hljs-property">next</span>;<br>        <span class="hljs-title class_">ListNode</span> second = prev.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br><br>        <span class="hljs-comment">// 将第一个节点的指针指向第二个节点的指针指向的节点</span><br>        first.<span class="hljs-property">next</span> = second.<span class="hljs-property">next</span>;<br>        <span class="hljs-comment">// 将第二个节点的指针指向第一个节点</span><br>        second.<span class="hljs-property">next</span> = first;<br>        <span class="hljs-comment">// 将前一个节点的指针指向第二个节点</span><br>        prev.<span class="hljs-property">next</span> = second;<br><br>        <span class="hljs-comment">// 将前一个节点指向第一个节点</span><br>        prev = first;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回虚拟节点的下一个节点</span><br>    <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（迭代方法）"><a href="#C代码实现（迭代方法）" class="headerlink" title="C代码实现（迭代方法）"></a>C代码实现（迭代方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-comment">// 创建一个虚拟头节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummy</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummy-&gt;next = head;<br>    <span class="hljs-comment">// 创建一个前一个节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">prev</span> =</span> dummy;<br><br>    <span class="hljs-comment">// 当前一个节点下一个节点不为空，且下下个节点不为空时，进行交换</span><br>    <span class="hljs-keyword">while</span> (prev-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; prev-&gt;next-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 创建两个节点，分别指向前一个节点下一个节点和下下个节点</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">first</span> =</span> prev-&gt;next;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">second</span> =</span> prev-&gt;next-&gt;next;<br><br>        <span class="hljs-comment">// 将第一个节点指向下下个节点</span><br>        first-&gt;next = second-&gt;next;<br>        <span class="hljs-comment">// 将第二个节点指向第一个节点</span><br>        second-&gt;next = first;<br>        <span class="hljs-comment">// 将前一个节点指向第二个节点</span><br>        prev-&gt;next = second;<br><br>        <span class="hljs-comment">// 将前一个节点指向第一个节点</span><br>        prev = first;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回虚拟头节点的下一个节点</span><br>    <span class="hljs-keyword">return</span> dummy-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-代码实现（递归方法）"><a href="#C-代码实现（递归方法）" class="headerlink" title="C#代码实现（递归方法）"></a>C#代码实现（递归方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">ListNode</span> <span class="hljs-title class_">SwapPairs</span>(<span class="hljs-title class_">ListNode</span> head) &#123;<br>    <span class="hljs-comment">// 如果链表为空或者只有一个节点，则直接返回</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.<span class="hljs-property">next</span> == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个新的头节点，用来保存交换后的链表</span><br>    <span class="hljs-title class_">ListNode</span> newHead = head.<span class="hljs-property">next</span>;<br>    <span class="hljs-comment">// 将头节点的下一个节点作为头节点，进行递归调用</span><br>    head.<span class="hljs-property">next</span> = <span class="hljs-title class_">SwapPairs</span>(head.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>);<br>    <span class="hljs-comment">// 将新的头节点的下一个节点指向头节点</span><br>    newHead.<span class="hljs-property">next</span> = head;<br><br>    <span class="hljs-comment">// 返回新的头节点</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（递归方法）"><a href="#C代码实现（递归方法）" class="headerlink" title="C代码实现（递归方法）"></a>C代码实现（递归方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-comment">// 如果链表为空或者只有一个节点，直接返回</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || head-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">// 保存第二个节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">newHead</span> =</span> head-&gt;next;<br>    <span class="hljs-comment">// 将head的next指向下一个节点的next，即指向第二个节点</span><br>    head-&gt;next = swapPairs(head-&gt;next-&gt;next);<br>    <span class="hljs-comment">// 将第二个节点的next指向head，即指向第一个节点</span><br>    newHead-&gt;next = head;<br><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。每个节点最多被访问一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206. 反转链表</title>
    <link href="/2023/12/10/leetcode206/"/>
    <url>/2023/12/10/leetcode206/</url>
    
    <content type="html"><![CDATA[<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>反转一个单链表。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用迭代或递归的方式来反转链表。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p><strong>迭代方法：</strong></p><ol><li>初始化三个指针：<code>prev</code>（前一个节点）、<code>curr</code>（当前节点）、<code>next</code>（下一个节点）。</li><li>遍历链表，每次将当前节点的 <code>next</code> 指向前一个节点，然后更新 <code>prev</code>、<code>curr</code>、<code>next</code> 的位置。</li><li>当 <code>curr</code> 到达链表末尾时，返回新的头节点。</li></ol><p><strong>递归方法：</strong></p><ol><li>使用递归反转链表，递归的终止条件是当前节点为 <code>null</code> 或者 <code>next</code> 节点为 <code>null</code>。</li><li>在递归过程中，将当前节点的 <code>next</code> 指向前一个节点，然后返回新的头节点。</li></ol><h3 id="C-代码实现（迭代方法）"><a href="#C-代码实现（迭代方法）" class="headerlink" title="C#代码实现（迭代方法）"></a>C#代码实现（迭代方法）</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">ReverseList</span>(<span class="hljs-params">ListNode head</span>)</span> &#123;<br>    <span class="hljs-comment">// 反转链表，需要三个指针：prev，curr，next</span><br>    ListNode prev = <span class="hljs-literal">null</span>;<br>    ListNode curr = head;<br><br>    <span class="hljs-comment">// 遍历链表，将当前节点的指针指向前一个节点</span><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        ListNode next = curr.next;<br>        curr.next = prev;<br>        prev = curr;<br>        curr = next;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回反转后的头节点</span><br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（迭代方法）"><a href="#C代码实现（迭代方法）" class="headerlink" title="C代码实现（迭代方法）"></a>C代码实现（迭代方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">reverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-comment">// 反转链表，返回反转后的头节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">prev</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">curr</span> =</span> head;<br><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 保存下一个节点</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">next</span> =</span> curr-&gt;next;<br>        <span class="hljs-comment">// 反转指针</span><br>        curr-&gt;next = prev;<br>        <span class="hljs-comment">// 更新指针</span><br>        prev = curr;<br>        curr = next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-代码实现（递归方法）"><a href="#C-代码实现（递归方法）" class="headerlink" title="C#代码实现（递归方法）"></a>C#代码实现（递归方法）</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">ReverseList</span>(<span class="hljs-params">ListNode head</span>)</span> &#123;<br>    <span class="hljs-comment">// 如果链表为空或者只有一个节点，则直接返回</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">// 递归调用，将head的下一个节点作为头节点，将head的下一个节点指向head，将head的下一个节点指向null</span><br>    ListNode newHead = ReverseList(head.next);<br>    head.next.next = head;<br>    head.next = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 返回反转后的头节点</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（递归方法）"><a href="#C代码实现（递归方法）" class="headerlink" title="C代码实现（递归方法）"></a>C代码实现（递归方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">reverseList</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span> &#123;<br>    <span class="hljs-comment">// 如果链表为空或者只有一个节点，则直接返回</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || head-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">// 递归调用reverseList函数，将head-&gt;next反转，并将反转后的结果赋值给newHead</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">newHead</span> =</span> reverseList(head-&gt;next);<br>    <span class="hljs-comment">// 将head-&gt;next的next指向head，head的next指向NULL</span><br>    head-&gt;next-&gt;next = head;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 返回反转后的结果</span><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。每个节点最多被访问一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>203. 移除链表元素</title>
    <link href="/2023/12/09/leetcode203/"/>
    <url>/2023/12/09/leetcode203/</url>
    
    <content type="html"><![CDATA[<h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>删除链表中等于给定值 <code>val</code> 的所有节点。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用迭代或递归的方式遍历链表，检查每个节点的值是否等于目标值 <code>val</code>，若是则删除该节点。需要注意的是，删除节点时需要更新前一个节点的 <code>next</code> 指针。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p><strong>迭代方法：</strong></p><ol><li>初始化一个虚拟头节点 <code>dummy</code>，使其 <code>next</code> 指向链表的头节点。</li><li>初始化指针 <code>prev</code>，初始指向虚拟头节点。</li><li>遍历链表，当发现节点值等于目标值 <code>val</code> 时，删除该节点，即更新 <code>prev</code> 的 <code>next</code> 指针。</li><li>返回虚拟头节点的 <code>next</code>，即为删除目标值后的新链表。</li></ol><p><strong>递归方法：</strong></p><ol><li>使用递归遍历链表，对每个节点进行判断，若节点值等于目标值 <code>val</code>，则删除该节点。</li><li>递归调用下一个节点。</li><li>返回新链表的头节点。</li></ol><h3 id="C-代码实现（迭代方法）"><a href="#C-代码实现（迭代方法）" class="headerlink" title="C#代码实现（迭代方法）"></a>C#代码实现（迭代方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">ListNode</span> <span class="hljs-title class_">RemoveElements</span>(<span class="hljs-title class_">ListNode</span> head, int val) &#123;<br>    <span class="hljs-comment">// 创建一个虚拟头节点</span><br>    <span class="hljs-title class_">ListNode</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 将虚拟头节点指向头节点</span><br>    dummy.<span class="hljs-property">next</span> = head;<br>    <span class="hljs-comment">// 创建一个前一个节点</span><br>    <span class="hljs-title class_">ListNode</span> prev = dummy;<br><br>    <span class="hljs-comment">// 遍历链表</span><br>    <span class="hljs-keyword">while</span> (prev.<span class="hljs-property">next</span> != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果当前节点的值等于val</span><br>        <span class="hljs-keyword">if</span> (prev.<span class="hljs-property">next</span>.<span class="hljs-property">val</span> == val) &#123;<br>            <span class="hljs-comment">// 将当前节点指向下一个节点</span><br>            prev.<span class="hljs-property">next</span> = prev.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则，前一个节点指向当前节点</span><br>            prev = prev.<span class="hljs-property">next</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回头节点</span><br>    <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（迭代方法）"><a href="#C代码实现（迭代方法）" class="headerlink" title="C代码实现（迭代方法）"></a>C代码实现（迭代方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">removeElements</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">// 创建一个虚拟头节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">dummy</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    dummy-&gt;next = head;<br>    <span class="hljs-comment">// 创建一个前一个节点指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">prev</span> =</span> dummy;<br><br>    <span class="hljs-comment">// 遍历链表</span><br>    <span class="hljs-keyword">while</span> (prev-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 如果当前节点的值等于val</span><br>        <span class="hljs-keyword">if</span> (prev-&gt;next-&gt;val == val) &#123;<br>            <span class="hljs-comment">// 创建一个临时节点</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">temp</span> =</span> prev-&gt;next;<br>            <span class="hljs-comment">// 将当前节点指向下一个节点</span><br>            prev-&gt;next = prev-&gt;next-&gt;next;<br>            <span class="hljs-comment">// 释放临时节点</span><br>            <span class="hljs-built_in">free</span>(temp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则，前一个节点指向下一个节点</span><br>            prev = prev-&gt;next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回虚拟头节点的下一个节点</span><br>    <span class="hljs-keyword">return</span> dummy-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-代码实现（递归方法）"><a href="#C-代码实现（递归方法）" class="headerlink" title="C#代码实现（递归方法）"></a>C#代码实现（递归方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-title class_">ListNode</span> <span class="hljs-title class_">RemoveElements</span>(<span class="hljs-title class_">ListNode</span> head, int val) &#123;<br>    <span class="hljs-comment">// 如果链表为空，则返回null</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 递归调用，删除下一个节点</span><br>    head.<span class="hljs-property">next</span> = <span class="hljs-title class_">RemoveElements</span>(head.<span class="hljs-property">next</span>, val);<br>    <span class="hljs-comment">// 如果当前节点的值为val，则返回下一个节点，否则返回当前节点</span><br>    <span class="hljs-keyword">return</span> head.<span class="hljs-property">val</span> == val ? head.<span class="hljs-property">next</span> : head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现（递归方法）"><a href="#C代码实现（递归方法）" class="headerlink" title="C代码实现（递归方法）"></a>C代码实现（递归方法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">removeElements</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-comment">// 如果链表为空，则返回空</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 递归调用，删除链表中下一个节点值为val的节点</span><br>    head-&gt;next = removeElements(head-&gt;next, val);<br>    <span class="hljs-comment">// 如果当前节点值为val，则返回下一个节点，否则返回当前节点</span><br>    <span class="hljs-keyword">return</span> head-&gt;val == val ? head-&gt;next : head;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。每个节点最多被访问一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>209.长度最小的子数组</title>
    <link href="/2023/12/09/leetcode209/"/>
    <url>/2023/12/09/leetcode209/</url>
    
    <content type="html"><![CDATA[<h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的子数组。如果不存在符合条件的子数组，返回 0。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用滑动窗口的思想解决该问题。定义两个指针，分别表示滑动窗口的左右边界，通过移动右边界来扩展窗口，移动左边界来缩小窗口。在移动的过程中，实时更新滑动窗口内的元素和，并记录最小子数组的长度。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li>初始化左指针 <code>left</code> 和右指针 <code>right</code>，它们初始都指向数组的第一个元素。</li><li>初始化变量 <code>minLen</code> 表示最小子数组的长度，设置为正无穷大。</li><li>初始化变量 <code>sum</code> 表示当前滑动窗口内元素的和，初始值为0。</li><li>使用循环移动右指针 right，直到滑动窗口内元素和大于等于目标值 s<br>如果 <code>sum</code> 大于等于目标值 <code>s</code>，更新 <code>minLen</code> 为当前窗口长度，并向左移动左指针 <code>left</code> 缩小窗口，更新 <code>sum</code>。</li><li>重复步骤4，直到右指针到达数组末尾。</li><li>如果 <code>minLen</code> 仍然是初始值，说明不存在满足条件的子数组，返回0；否则，返回 <code>minLen</code>。</li></ol><h3 id="特殊案例"><a href="#特殊案例" class="headerlink" title="特殊案例"></a>特殊案例</h3><ul><li>如果输入数组为空，则直接返回0。</li></ul><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">MinSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-comment">// 如果数组为空或者长度为0，则返回0</span><br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.Length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义左右指针</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 定义最小子数组长度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">minLen</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>.MaxValue;<br>    <span class="hljs-comment">// 定义子数组和</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 遍历数组</span><br>    <span class="hljs-keyword">while</span> (right &lt; nums.Length) &#123;<br>        <span class="hljs-comment">// 累加子数组和</span><br>        sum += nums[right];<br><br>        <span class="hljs-comment">// 如果子数组和大于等于s，则移动左指针，并更新最小子数组长度</span><br>        <span class="hljs-keyword">while</span> (sum &gt;= s) &#123;<br>            minLen = Math.Min(minLen, right - left + <span class="hljs-number">1</span>);<br>            sum -= nums[left];<br>            left++;<br>        &#125;<br><br>        right++;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果最小子数组长度未更新，则说明不存在符合条件的子数组，返回0，否则返回最小子数组长度</span><br>    <span class="hljs-keyword">return</span> minLen == <span class="hljs-type">int</span>.MaxValue ? <span class="hljs-number">0</span> : minLen;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">NULL</span> || numsSize == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> minLen = INT_MAX;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (right &lt; numsSize) &#123;<br>        sum += nums[right];<br><br>        <span class="hljs-keyword">while</span> (sum &gt;= s) &#123;<br>            minLen = fmin(minLen, right - left + <span class="hljs-number">1</span>);<br>            sum -= nums[left];<br>            left++;<br>        &#125;<br><br>        right++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> minLen == INT_MAX ? <span class="hljs-number">0</span> : minLen;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是数组 <code>nums</code> 的长度。每个元素至多被访问两次，即左指针和右指针各一次。</li><li>空间复杂度：O(1)。除了常数级别的变量，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>977. 有序数组的平方</title>
    <link href="/2023/12/07/leetcode977/"/>
    <url>/2023/12/07/leetcode977/</url>
    
    <content type="html"><![CDATA[<h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个按照升序排列的整数数组 <code>nums</code>，返回每个数字的平方组成的新数组，要求也按照升序排列。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于数组已经按照升序排列，我们可以利用双指针的方法，分别从数组的两端开始遍历，比较平方后的值大小，然后将较大的平方值放入结果数组的末尾。这样可以保证结果数组是按照升序排列的。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ol><li><p>初始化结果数组 <code>result</code>，长度与输入数组 <code>nums</code> 相同。</p></li><li><p>使用两个指针 <code>left</code> 和 <code>right</code> 分别指向数组 <code>nums</code> 的开始和结束位置。</p></li><li><p>循环遍历数组，比较 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">nums[left]和 nums[right]的平方值大小：<br></code></pre></td></tr></table></figure><ul><li>如果 <code>nums[left]</code> 的平方值大于等于 <code>nums[right]</code> 的平方值，将 <code>nums[left]</code> 的平方值放入 <code>result</code> 数组的末尾，然后左指针向右移动一位。</li><li>如果 <code>nums[left]</code> 的平方值小于 <code>nums[right]</code> 的平方值，将 <code>nums[right]</code> 的平方值放入 <code>result</code> 数组的末尾，然后右指针向左移动一位。</li></ul></li><li><p>返回结果数组 <code>result</code>。</p></li></ol><h3 id="特殊案例"><a href="#特殊案例" class="headerlink" title="特殊案例"></a>特殊案例</h3><ul><li>如果输入数组为空，则直接返回空数组 []。</li></ul><h3 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C#代码实现"></a>C#代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int[] <span class="hljs-title class_">SortedSquares</span>(int[] nums) &#123;<br>    <span class="hljs-comment">// 创建一个长度为nums.Length的数组result</span><br>    int[] result = <span class="hljs-keyword">new</span> int[nums.<span class="hljs-property">Length</span>];<br>    <span class="hljs-comment">// 定义左右指针left和right，以及索引index，初始值为nums.Length - 1</span><br>    int left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>, index = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 当left小于等于right时，循环</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-comment">// 获取左右指针指向的元素的平方</span><br>        int leftSquare = nums[left] * nums[left];<br>        int rightSquare = nums[right] * nums[right];<br><br>        <span class="hljs-comment">// 如果左指针指向的元素的平方大于右指针指向的元素的平方，则将左指针指向的元素的平方赋值给result数组，并将left指针右移</span><br>        <span class="hljs-keyword">if</span> (leftSquare &gt;= rightSquare) &#123;<br>            result[index] = leftSquare;<br>            left++;<br>        <span class="hljs-comment">// 否则，将右指针指向的元素的平方赋值给result数组，并将right指针左移</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result[index] = rightSquare;<br>            right--;<br>        &#125;<br><br>        <span class="hljs-comment">// 将索引index左移</span><br>        index--;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回result数组</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C代码实现"><a href="#C代码实现" class="headerlink" title="C代码实现"></a>C代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">sortedSquares</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * numsSize);<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = numsSize - <span class="hljs-number">1</span>, index = numsSize - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> leftSquare = nums[left] * nums[left];<br>        <span class="hljs-type">int</span> rightSquare = nums[right] * nums[right];<br><br>        <span class="hljs-keyword">if</span> (leftSquare &gt;= rightSquare) &#123;<br>            result[index] = leftSquare;<br>            left++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result[index] = rightSquare;<br>            right--;<br>        &#125;<br><br>        index--;<br>    &#125;<br><br>    *returnSize = numsSize;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度和空间复杂度"><a href="#时间复杂度和空间复杂度" class="headerlink" title="时间复杂度和空间复杂度"></a>时间复杂度和空间复杂度</h3><ul><li>时间复杂度：O(n)，其中 n 是数组 <code>nums</code> 的长度。遍历一次数组。</li><li>空间复杂度：O(1)。除了保存结果的数组之外，算法的空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26. 删除有序数组中的重复项</title>
    <link href="/2023/12/06/leetcode26/"/>
    <url>/2023/12/06/leetcode26/</url>
    
    <content type="html"><![CDATA[<h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个有序数组 <code>nums</code>，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于数组已经是有序的，所以重复的元素必然相邻。</p><ol><li>定义一个指针 <code>left</code>，初始时指向数组的第一个元素。</li><li>遍历数组，如果当前元素 <code>nums[i]</code> 不等于上一个元素 <code>nums[i-1]</code>，则将其复制到 <code>nums[left]</code> 的位置，并将 <code>left</code> 指针向后移动一位。</li><li>遍历结束后，<code>left</code> 指针的位置即为新数组的长度。</li><li>返回 <code>left</code> 作为结果。</li></ol><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>C#</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int <span class="hljs-title class_">RemoveDuplicates</span>(int[] nums)<br>&#123;<br>    <span class="hljs-comment">// 如果数组为空，则直接返回0</span><br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-property">Length</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 左指针，初始值为1</span><br>    int left = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 遍历数组，从第二个元素开始</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-property">Length</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">// 如果当前元素不等于前一个元素，则将当前元素赋值给左指针位置</span><br>        <span class="hljs-keyword">if</span> (nums[i] != nums[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            nums[left] = nums[i];<br>            left++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回左指针位置，即为新数组的长度</span><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><br>public int <span class="hljs-title class_">RemoveDuplicates</span>(int[] nums)<br>&#123;<br>    <span class="hljs-comment">// 左指针，初始值为0</span><br>    int left = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 右指针，初始值为1</span><br>    int right = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 当右指针小于数组长度时，循环</span><br>    <span class="hljs-keyword">while</span> (right &lt; numsSize)<br>    &#123;<br>        <span class="hljs-comment">// 如果当前元素不等于前一个元素，则将当前元素赋值给左指针位置+1的元素</span><br>        <span class="hljs-keyword">if</span> (nums[left] != nums[right])<br>        &#123;<br>            nums[left + <span class="hljs-number">1</span>] = nums[right];<br>            left++;<br>        &#125;<br><br>        <span class="hljs-comment">// 右指针右移</span><br>        right++;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回左指针位置+1，即为新数组的长度</span><br>    <span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span> &#123;<br>    <span class="hljs-keyword">if</span> (numsSize == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; numsSize; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] != nums[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            nums[left] = nums[i];<br>            left++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)，其中 n 为数组的长度。需要遍历一次数组。</li><li>空间复杂度：O(1)。只使用了常数个额外空间。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27. 移除元素</title>
    <link href="/2023/12/05/leetcode27/"/>
    <url>/2023/12/05/leetcode27/</url>
    
    <content type="html"><![CDATA[<h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>可以使用双指针的方法来解决这个问题。</p><ol><li>定义两个指针 <code>left</code> 和 <code>right</code>，初始时分别指向数组的开头。</li><li>遍历数组，如果当前元素不等于目标值 <code>val</code>，将其复制到 <code>nums[left]</code> 的位置，并将 <code>left</code> 指针向后移动一位。</li><li>遍历结束后，<code>left</code> 指针的位置即为新数组的长度。</li><li>返回 <code>left</code> 作为结果。</li></ol><h3 id="辅助理解"><a href="#辅助理解" class="headerlink" title="辅助理解"></a>辅助理解</h3><p>假如你站着自由女神像下面，左手上抓着__赤橙黄绿青蓝紫__7个气球，然后你对面站着一个小女孩，手上也拿着一个__橙色__的气球，小女孩慢慢走了过来，你蹲下去，对小女孩说：小妹妹你喜欢气球吗，小妹妹我送你一个和你手上一样的__橙色__气球好吗？我有个要求就是，你只能在我左手上进行选择，不能把气球放到右手</p><ol><li>你左手抓的气球 &#x3D;&#x3D; 数组中的元素，小女孩手上的气球 &#x3D;&#x3D; 目标的值</li><li>两个指针 <code>left</code> 和 <code>right</code>相当于气球的线（可以理解为指针），通过线能找到气球（可以理解为指针能找到值）再深究点就是堆栈了，这里不讲了</li><li>定义了两条线<code>left</code> 和 <code>right</code>都是从第一个气球开始，<code>left</code> 的职责就是返回最终数量，<code>right</code> 的职责就是寻找匹配的气球，如果气球颜色不匹配，那就跳过,<code>left++</code> ,如果要是颜色匹配上，那就<code>right++</code> </li><li>返回最终数量 <code>left</code></li></ol><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>C#</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int <span class="hljs-title class_">RemoveElement</span>(int[] nums, int val)<br>&#123;<br>    <span class="hljs-comment">// 定义左右指针</span><br>    int left = <span class="hljs-number">0</span>;<br>    int right = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 当右指针没有超过数组的长度时，循环</span><br>    <span class="hljs-keyword">while</span> (right &lt; nums.<span class="hljs-property">Length</span>)<br>    &#123;<br>        <span class="hljs-comment">// 如果右指针指向的元素不等于val</span><br>        <span class="hljs-keyword">if</span> (nums[right] != val)<br>        &#123;<br>            <span class="hljs-comment">// 将右指针指向的元素赋值给左指针指向的元素</span><br>            nums[left] = nums[right];<br>            <span class="hljs-comment">// 左指针右移</span><br>            left++;<br>        &#125;<br><br>        <span class="hljs-comment">// 右指针右移</span><br>        right++;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回左指针的索引</span><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (right &lt; numsSize)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[right] != val)<br>        &#123;<br>            nums[left] = nums[right];<br>            left++;<br>        &#125;<br><br>        right++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)，其中 n 为数组的长度。需要遍历一次数组。</li><li>空间复杂度：O(1)。只使用了常数个额外空间。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>69. x的平方数</title>
    <link href="/2023/12/04/leetcode69/"/>
    <url>/2023/12/04/leetcode69/</url>
    
    <content type="html"><![CDATA[<h2 id="标题：69-x的平方数"><a href="#标题：69-x的平方数" class="headerlink" title="标题：69. x的平方数"></a>标题：69. x的平方数</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个非负整数 x，计算并返回 x 的平方根。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>可以使用二分查找的方法来逼近平方根的值。</p><ol><li>定义变量 left 和 right，分别表示搜索范围的左边界和右边界。初始时，left 为 0，right 为 x。</li><li>进行二分查找，直到找到平方根的值。循环条件为 left &lt;&#x3D; right：<ul><li>计算中间位置 mid，通过 left + (right - left) &#x2F; 2 求得。</li><li>如果 mid 的平方大于 x，则更新 right 为 mid - 1，继续向左查找。</li><li>如果 mid 的平方小于 x，则更新 left 为 mid + 1，继续向右查找。</li><li>如果 mid 的平方等于 x，则返回 mid。</li></ul></li><li>当循环结束时，返回右边界的值作为最接近x的平方根</li></ol><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>C#</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public double <span class="hljs-title class_">MySqrt</span>(double x)<br>&#123;<br>    <span class="hljs-comment">// 初始化左右边界</span><br>    int left = <span class="hljs-number">0</span>;<br>    int right = x;<br><br>    <span class="hljs-comment">// 使用二分查找法查找平方根</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-comment">// 计算中间值</span><br>        int mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 计算中间值的平方</span><br>        long square = mid * mid;<br><br>        <span class="hljs-comment">// 根据中间值的平方与x的大小关系，调整左右边界</span><br>        <span class="hljs-keyword">if</span> (square &gt; x)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (square &lt; x)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 找到平方根</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有找到平方根，返回右边界</span><br>    <span class="hljs-keyword">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = x;<br><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">long</span> square = (<span class="hljs-type">long</span>)mid * mid;<br><br>        <span class="hljs-keyword">if</span> (square &gt; x)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (square &lt; x)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(log n)，其中 n 是数组的长度。每次二分查找可以将查找范围缩小一半，因此时间复杂度为对数级别。</li><li>空间复杂度：O(1)。除了返回的结果数组外，算法的额外空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34. 在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2023/11/23/leetcode34/"/>
    <url>/2023/11/23/leetcode34/</url>
    
    <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个按升序排序的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的起始位置和结束位置。如果目标值不在数组中，则返回 [-1, -1]。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>该问题可以通过两次二分查找来解决。第一次二分查找用于找到目标值的起始位置，第二次二分查找用于找到目标值的结束位置。</p></li><li><p>定义两个变量 left 和 right，初始值分别为 0 和 nums 数组的长度减一。</p></li><li><p>第一次二分查找，找到目标值的起始位置。循环条件为 left &lt;&#x3D; right ：</p><ul><li>计算中间位置 mid，通过left + (right - left) &#x2F; 2 求得。</li><li>如果 nums[mid] 大于目标值 target，则更新 right  为 mid - 1，继续向左查找。</li><li>如果 nums[mid] 小于目标值 target，则更新 left 为 mid + 1，继续向右查找。</li><li>如果 nums[mid] 等于目标值 target，则更新 right 为 mid - 1，继续向左查找。</li></ul></li><li><p>进行第二次二分查找，找到目标值的结束位置。重置变量 left 为 0，right 为 nums 数组的长度减一。<br>循环条件为 left &lt;&#x3D; right 。</p><ul><li>计算中间位置 mid，通过left + (right - left) &#x2F; 2 求得。</li><li>如果 nums[mid] 大于目标值 target，则更新 right  为 mid - 1，继续向左查找。</li><li>如果 nums[mid] 小于目标值 target，则更新 left为 mid + 1，继续向右查找。</li><li>如果 nums[mid] 等于目标值 target，则更新 left为 mid + 1，继续向右查找。<br>返回结果 [left, right ]，即为目标值在数组中的起始位置和结束位置。</li></ul></li></ol><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>C#</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public int[] <span class="hljs-title class_">SearchRange</span>(int[] nums, int target)<br>&#123;<br>    <span class="hljs-comment">// 初始化结果数组</span><br>    int[] result = &#123; -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-comment">// 初始化左右指针</span><br>    int left = <span class="hljs-number">0</span>;<br>    int right = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 寻找起始位置</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        int mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 找到起始位置</span><br>            result[<span class="hljs-number">0</span>] = mid;<br>            right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向左查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找结束位置</span><br>    left = <span class="hljs-number">0</span>;<br>    end = nums.<span class="hljs-property">Length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        int mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 找到结束位置</span><br>            result[<span class="hljs-number">1</span>] = mid;<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向右查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">searchRange</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span> &#123;<br>    <span class="hljs-type">int</span>* result = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    result[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    result[<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 寻找起始位置</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">0</span>] = mid;<br>            right = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向左查找</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找结束位置</span><br>    left = <span class="hljs-number">0</span>;<br>    end = numsSize - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= end)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            result[<span class="hljs-number">1</span>] = mid;<br>            left = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 继续向右查找</span><br>        &#125;<br>    &#125;<br><br>    *returnSize = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(log n)，其中 n 是数组的长度。每次二分查找可以将查找范围缩小一半，因此时间复杂度为对数级别。</li><li>空间复杂度：O(1)。除了返回的结果数组外，算法的额外空间复杂度是常数级别的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2023/11/21/leetcode35/"/>
    <url>/2023/11/21/leetcode35/</url>
    
    <content type="html"><![CDATA[<h2 id="标题：35-搜索插入位置"><a href="#标题：35-搜索插入位置" class="headerlink" title="标题：35. 搜索插入位置"></a>标题：35. 搜索插入位置</h2><blockquote><p>我最近在研究二分算法，并进行了相关实现。</p></blockquote><p><strong>搜索插入位置算法解析及实现步骤</strong></p><p>搜索插入位置算法用于在已排序的数组中查找目标值，并返回其插入的位置。</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个 n 个元素有序（升序）的整型数组 nums 和一个目标值 target，写一个函数搜索 nums 中的 target，并返回其插入的位置。如果目标值存在，则返回目标值的索引；如果目标值不存在，则返回它将会被插入的位置索引。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><ol><li>初始化左指针 left 为数组起始位置，右指针 right 为数组末尾位置。</li><li>循环执行以下步骤，直到左指针不再小于等于右指针：<ul><li>计算中间指针 mid，通过 left + (right - left) &#x2F; 2 求得。</li><li>如果中间元素大于目标值，将右指针 right 更新为 mid - 1。</li><li>如果中间元素小于目标值，将左指针 left 更新为 mid + 1。</li><li>如果中间元素等于目标值，返回 mid 作为目标值的插入位置。</li></ul></li><li>若循环结束仍未找到目标值，返回左指针 left 作为目标值的插入位置。</li></ol><h3 id="解题实现："><a href="#解题实现：" class="headerlink" title="解题实现："></a>解题实现：</h3><p>C#</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">searchInsert</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> right = nums.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-built_in">int</span> mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(log n)，其中 n 是数组的长度。</li><li>空间复杂度：O(1)。</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章</title>
    <link href="/2023/11/11/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2023/11/11/%E7%BA%BF%E4%BB%A3%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>线代</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 求导数</title>
    <link href="/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>高数二</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul注册发现</title>
    <link href="/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/"/>
    <url>/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>注册发现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023个人年度计划</title>
    <link href="/2023/11/11/2023%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"/>
    <url>/2023/11/11/2023%E4%B8%AA%E4%BA%BA%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ocelot网关</title>
    <link href="/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <url>/2023/11/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
      <category>网关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>影响力</title>
    <link href="/2023/11/11/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/11/%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书</category>
      
      <category>心理学</category>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心理学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后端面试</title>
    <link href="/2023/11/11/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    <url>/2023/11/11/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行为型设计模式</title>
    <link href="/2023/11/11/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Behavioral</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构型设计模式</title>
    <link href="/2023/11/11/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Structural</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建型设计模式</title>
    <link href="/2023/11/11/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/11/11/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Creative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具</title>
    <link href="/2023/11/11/%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/11/11/%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2023/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>口语第一天</title>
    <link href="/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/"/>
    <url>/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>口语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>704. 二分查找</title>
    <link href="/2023/11/11/%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/11/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="标题：704-二分查找"><a href="#标题：704-二分查找" class="headerlink" title="标题：704. 二分查找"></a>标题：704. 二分查找</h2><blockquote><p>我最近在研究二分查找算法，并进行了相关实现。通过本文，我将详细介绍二分查找算法的原理和步骤，以及如何在编程中实现该算法。这篇文章适合那些对算法和查找技术感兴趣的读者。</p></blockquote><p><strong>二分查找算法解析及实现步骤</strong><br>二分查找算法是一种高效的查找方法，大部分适用于已排序的数组（少部分可以求极值）。</p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><ol><li>初始化左指针 left 为数组起始位置，右指针 right 为数组末尾位置。</li><li>循环执行以下步骤，直到左指针不再小于等于右指针：</li><li>计算中间指针 mid，通过 left + (right - left) &#x2F; 2 求得。<ul><li>如果中间元素大于目标值，将右指针 right 更新为 mid - 1。</li><li>如果中间元素小于目标值，将左指针 left 更新为 mid + 1。</li><li>如果中间元素等于目标值，返回 mid 作为目标值的索引。</li><li>若循环结束仍未找到目标值，返回 -1 表示未找到。</li></ul></li></ol><h3 id="解题实现："><a href="#解题实现：" class="headerlink" title="解题实现："></a>解题实现：</h3><p>C#</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Search</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> right = nums.Length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-built_in">int</span> mid = left + (right - left &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>        &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target)<br>        &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ol><li><p>时间复杂度：O(log n)，其中 n 是数组的长度。</p></li><li><p>空间复杂度：O(1)。</p></li></ol><p><strong>通过本文，你将清楚地了解二分查找算法的原理和实现步骤。希望对那些对算法和查找感兴趣的读者有所帮助。如果你想了解更多相关内容，可以查看我的其他文章</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2023/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 求极限</title>
    <link href="/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2023/11/11/%E6%95%B0%E4%BA%8C%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>高数二</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dur词根 - 持久、坚固</title>
    <link href="/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/11/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Dur词根-持久、坚固"><a href="#Dur词根-持久、坚固" class="headerlink" title="Dur词根 - 持久、坚固"></a>Dur词根 - 持久、坚固</h2><p><strong>词根口语： “我最近背单词太辛苦了，每天就像一场’Dur’al marathon！💪”</strong></p><blockquote><p>在我们的生活中，持续性和忍耐力是非常重要的品质。无论是面对困难的时候还是追求目标的过程中，”Dur”词根下的词汇可以成为我们的助力</p></blockquote><ol><li><font color=Crimson>Dur</font>ation（n.）- 持续时间</li><li>En<font color=Crimson>dur</font>e（v.）- 忍耐</li><li><font color=Crimson>Dur</font>able（adj.）- 耐久的</li><li>In<font color=Crimson>dur</font>ation（n.）- 硬化</li><li><font color=Crimson>Dur</font>ess（n.）- 强迫</li><li><font color=Crimson>Dur</font>ing（prep.）- 在…期间</li><li>En<font color=Crimson>dur</font>ance（n.）- 忍耐力</li><li>In<font color=Crimson>dur</font>ative（adj.）- 强化的</li><li>En<font color=Crimson>dur</font>ing（adj.）- 持久的</li><li>Ob<font color=Crimson>dur</font>ate（adj.）- 顽固的</li><li>En<font color=Crimson>dur</font>ant（adj.）- 耐心的</li><li>In<font color=Crimson>dur</font>ated（adj.）- 坚硬的</li><li><font color=Crimson>Dur</font>ance（n.）- 拘留</li><li>In<font color=Crimson>dur</font>ing（adj.）- 忍耐的</li><li><font color=Crimson>Dur</font>ability（n.）- 耐久性</li><li>Ob<font color=Crimson>dur</font>ation（n.）- 顽固</li><li>En<font color=Crimson>dur</font>ability（n.）- 持久性</li><li><font color=Crimson>Dur</font>ometer（n.）- 量硬度的仪器</li><li>In<font color=Crimson>dur</font>ating（adj.）- 使硬化的</li></ol><p><strong>英语谚语： “Durability is not the absence of vulnerability, but the ability to endure and bounce back. Keep going!🌟”</strong></p><p><strong>翻译：持久性不是没有脆弱性，而是有承受和反弹的能力。继续前进</strong></p>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>单词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/09/hello-world/"/>
    <url>/2023/11/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
